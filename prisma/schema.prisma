// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String    @unique
  phone            String
  active           Boolean   @default(true)
  profileImage     String?   @map("profile_image")
  gender           String
  role             Role      @default(MENTEE)
  mentor           Mentor[]
  mentee           Mentee[]
  sentMessages     Message[] @relation("sent_messages")
  receivedMessages Message[] @relation("received_messages")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

model Mentor {
  id                String         @id @default(cuid())
  currentTitle      String         @map("current_title")
  companyName       String         @map("company_name")
  fieldOfExpertise  String         @map("field_of_expertise")
  yearsOfExperience Int            @map("years_of_experience")
  description       String
  rating            Float          @default(0.0)
  isTopMentor       Boolean        @default(false) @map("is_top_mentor")
  user              User           @relation(fields: [userId], references: [id])
  userId            String
  mentees           Mentee[]
  tasks             Task[]
  requests          Request[]
  meetings          Meeting[]
  testimonials      Testimonial[]
  availabilities    Availability[]

  @@map("mentors")
}

model Mentee {
  id               String        @id @default(cuid())
  educationLevel   String        @map("education_level")
  careerGoals      String        @map("career_goals")
  careerHistory    String        @map("career_history")
  careerChallenges String        @map("career_challenges")
  skills           String[]
  bio              String
  dob              DateTime
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  mentors          Mentor[]
  tasks            Task[]
  requests         Request[]
  meetings         Meeting[]
  reviews          Testimonial[]

  @@map("mentees")
}

model Task {
  id          String     @id @default(cuid())
  postition   Int
  title       String
  description String
  mentor      Mentor     @relation(fields: [mentorId], references: [id])
  mentee      Mentee     @relation(fields: [menteeId], references: [id])
  mentorId    String
  menteeId    String
  status      TaskStatus @default(TODO)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at")

  @@map("tasks")
}

model Message {
  id         String   @id @default(cuid())
  content    String
  sender     User     @relation("sent_messages", fields: [senderId], references: [id])
  receiver   User     @relation("received_messages", fields: [receiverId], references: [id])
  senderId   String   @map("sender_id")
  receiverId String   @map("receiver_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("messages")
}

model Meeting {
  id        String   @id @default(cuid())
  endDate   DateTime @map("end_date")
  wherebyId String   @map("whereby_id")
  hostUrl   String   @map("host_url")
  guestUrl  String   @map("guest_url")
  mentor    Mentor   @relation(fields: [mentorId], references: [id])
  mentee    Mentee   @relation(fields: [menteeId], references: [id])
  mentorId  String
  menteeId  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([menteeId, mentorId])
  @@map("meetings")
}

model Testimonial {
  id        String   @id @default(cuid())
  content   String
  mentor    Mentor   @relation(fields: [mentorId], references: [id])
  mentorId  String
  mentee    Mentee   @relation(fields: [menteeId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  menteeId  String

  @@map("testimonials")
}

model Availability {
  id        String   @id @default(cuid())
  dayOfWeek String   @map("day_of_week")
  startTime String   @map("start_time")
  endTime   String   @map("end_time")
  mentor    Mentor   @relation(fields: [mentorId], references: [id])
  mentorId  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("availabilities")
}

model Request {
  id        String        @id @default(cuid())
  status    RequestStatus @default(PENDING)
  mentee    Mentee        @relation(fields: [menteeId], references: [id])
  menteeId  String
  mentor    Mentor        @relation(fields: [mentorId], references: [id])
  mentorId  String
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")

  @@unique([mentorId, menteeId])
  @@map("requests")
}

enum RequestStatus {
  PENDING
  APPROVED
  DECLINED
}

enum TaskStatus {
  TODO
  DOING
  DONE
}

enum Role {
  MENTOR
  MENTEE
  ADMIN
}
