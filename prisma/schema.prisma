// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  phone        String   @unique
  active       Boolean  @default(true)
  profileImage String?  @map("profile_image")
  gender       String
  dob          DateTime
  role         Role     @default(MENTEE)
  mentor       Mentor[]
  mentee       Mentee[]
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")
}

model Mentor {
  id                String         @id @default(cuid())
  currentTitle      String         @map("current_title")
  companyName       String         @map("company_name")
  fieldOfExpertise  String         @map("field_of_expertise")
  yearsOfExperience Int            @map("years_of_experience")
  description       String
  rating            Float
  isTopMentor       Boolean        @default(false) @map("is_top_mentor")
  user              User           @relation(fields: [userId], references: [id])
  userId            String
  mentees           Mentee[]
  meetings          Meetings[]
  testimonials      Testimonial[]
  availabilities    Availability[]
}

model Mentee {
  id               String     @id @default(cuid())
  educationLevel   String     @map("education_level")
  careerGoals      String     @map("career_goals")
  careerHistory    String     @map("career_history")
  careerChallenges String     @map("career_challenges")
  skills           String[]
  bio              String
  user             User       @relation(fields: [userId], references: [id])
  userId           String
  mentors          Mentor[]
  meetings         Meetings[]
}

model Meetings {
  id        String   @id @default(cuid())
  date      DateTime
  startTime DateTime @map("start_time")
  endTime   DateTime @map("end_time")
  mentor    Mentor   @relation(fields: [mentorId], references: [id])
  mentee    Mentee   @relation(fields: [menteeId], references: [id])
  mentorId  String
  menteeId  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Testimonial {
  id        String   @id @default(cuid())
  content   String
  mentor    Mentor?  @relation(fields: [mentorId], references: [id])
  mentorId  String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

model Availability {
  id        String   @id @default(cuid())
  dayOfWeek String   @map("day_of_week")
  times     String[]
  mentor    Mentor?  @relation(fields: [mentorId], references: [id])
  mentorId  String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
}

enum Role {
  MENTOR
  MENTEE
  ADMIN
}
